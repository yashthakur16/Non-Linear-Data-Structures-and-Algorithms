void dfs(vector<vector<int>> &edges,vector<vector<int>> &ans,unordered_map<int,list<int>> &adj,int node,vector<int> &component,unordered_map<int,bool> &visited)
{
    component.push_back(node);
    visited[node]=true;

    for(auto i:adj[node])
    {
        if(!visited[i])
        {
            dfs(edges,ans,adj,i,component,visited);
        }
    }
    return;
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<vector<int>> ans;
    unordered_map<int,list<int>> adj;
    unordered_map<int,bool> visited;

    for(int i=0;i<edges.size();i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for(int i=0;i<V;i++)
    {
        if(!visited[i])
        {
            vector<int> component;
            dfs(edges,ans,adj,i,component,visited);
            ans.push_back(component);
        }
    }

    return ans;

}
