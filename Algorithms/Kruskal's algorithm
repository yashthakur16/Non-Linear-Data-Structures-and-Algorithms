#include<algorithm>

bool cmp(vector<int> &a,vector<int> &b)
{
  return a[2]<b[2];
}

int findparent(vector<int> &parent,int node)
{
  if(parent[node]==node)
  {
    return node;
  }

  return parent[node]=findparent(parent, parent[node]);
}

void vunion(vector<int> &parent,vector<int> &rank,int u, int v)
{
  if(rank[u]<rank[v])
  {
    parent[u]=v;
  }
  else if(rank[v]<rank[u])
  {
    parent[v]=u;
  }
  else
  {
    parent[u]=v;
    rank[v]++;
  }

  return;

}


int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(),edges.end(),cmp);
  vector<int> parent(n);
  vector<int> rank(n);

  for(int i=0;i<n;i++)
  {
    parent[i]=i;
    rank[i]=0;
  }

  int minweight=0;

  for(int i=0;i<edges.size();i++)
  {
    int u=findparent(parent,edges[i][0]);
    int v=findparent(parent,edges[i][1]);
    int w=edges[i][2];

    if(u!=v)
    {
      vunion(parent,rank,u,v);
      minweight=minweight+w;

    }
  }

  return minweight;

  


}
